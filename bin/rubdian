#!/usr/bin/env ruby

require "rubdian"
require "rubdian/version"
require "logger"
require "rubdian/trollop"
require "colored"
require "cpx/distexec"

# parse arguments
subcommands = {
  'blacklist' => 'Blacklist management',
  'collect' => 'Collect updates',
  'distexec' => 'Run command accross all nodes',
  'history' => 'Show history',
  'queue' => 'Queue management',
  'setup' => 'Installs default configuration file',
  'upgrade' => 'Upgrade remote systems'
}

subs = []
subcommands.each do |cmd, desc|
  subs << cmd
end

gopts = Trollop::options do
  version "rubdian #{Rubdian::VERSION}"
  banner "rubdian #{Rubdian::VERSION} (c) 2013 CORPEX Internet GmbH"
  banner ""
  banner "Rubdian is a tool to automatically collect updates on debian based systems."
  banner ""
  banner <<-EOF
Usage: rubdian [options] subdcommand [options] [arg ... arg]
EOF
  banner ""
  banner "Subcommands:\n".green
  subcommands.each do |cmd, desc|
    _len = cmd.length
    _diff = 20 - _len
    _sp = " " * _diff
    _cmd = "#{cmd}".bold
    banner "  #{_cmd}#{_sp}    #{desc}\n"
  end
  banner ""
  banner "See rubdian <subcommand> --help for more informations regarding any subcommand"
  banner "and some usage examples."
  banner ""
  banner "Global options:".bold
  opt :config, "Use different configfile", :short => "-f", :default => Rubdian.default[:config]
  opt :concurrent, "Number of concurrent threads", :short => "-c", :default => 1
  opt :source, "Use file as a server list.", :short => "-s", :default => Rubdian.default[:source]
  opt :username, "Username to use for ssh connections.", :short => "-u", :default => Rubdian.default[:username]
  opt :debug, "Enable debug messages.", :short => "-d", :default => false
  opt :log_dir, "Set log directory", :short => "-L", :default => Rubdian.default[:logdir]
  opt :log_split, "Split output of each node into single log files", :short => "-S", :default => true
  stop_on subs
end

cmd = ARGV.shift

if cmd.nil?
  $stderr.puts "See rubdian --help"
  exit 1
end

if ! subs.include? cmd
  $stderr.puts "#{cmd} is no valid subcommand. See --help"
  exit 1
end

if ! File.exists?(Rubdian.default[:home]) and cmd != "setup"
  $stderr.puts "rubdian home #{Rubdian.default[:home]} does not exist."
  $stderr.puts "If this is your first time with rubdian, please run\n\n"
  $stderr.puts "  $ rubdian setup\n\n"
  exit 1
end

if cmd != "setup"
  _log = "#{Rubdian.default[:logdir]}/rubdian.log"
  Rubdian.logger(_log, "weekly")
  Cpx::Distexec.logger=Rubdian.logger
  Rubdian.logger.level = Logger::INFO
  if gopts[:debug]
    Rubdian.logger.level = Logger::DEBUG
  end
end

Cpx::Distexec.logger.level = Rubdian.logger.level

if cmd
  require "rubdian/command/#{cmd}"
  _mod = eval("Rubdian::Command::#{cmd.capitalize}")
  _mod.main(gopts)
end

